{
  "fileTypes": [
    "abc",
    "abh",
    "abp"
  ],
  "foldingStartMarker": "^X:|\\(",
  "foldingStopMarker": "^(?:\\s*)?$|\\)",
  "name": "ABC Notation",
  "patterns": [
    {
      "begin": "^(X:)\\s*(\\d+)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.tag.index.abc"
        },
        "2": {
          "name": "variable.parameter.index.abc"
        }
      },
      "comment": "ABC Tune",
      "end": "^(\\s*)?$",
      "name": "meta.tune.abc",
      "patterns": [
        {
          "include": "#tune-body"
        },
        {
          "include": "#title-field"
        },
        {
          "include": "#fields"
        },
        {
          "include": "#comments"
        },
        {
          "include": "#directive"
        }
      ]
    },
    {
      "include": "#prototype"
    },
    {
      "include": "#embedded-content"
    }
  ],
  "repository": {
    "abc-chord": {
      "begin": "(?x)\n  (\\[\n    (?![\\[\\|\\]<>/\\d\\r\\n\\s]|(?:[a-zA-Z]:))\n  )",
      "beginCaptures": {
        "1": {
          "name": "support.type.decoration.chord.abc"
        }
      },
      "comment": "Chord Sequences",
      "end": "(\\](?<![:\\|]))(\\d*[<>/]*\\d*)?",
      "endCaptures": {
        "1": {
          "name": "support.type.decoration.chord.abc"
        },
        "2": {
          "name": "storage.type.note-length.abc"
        }
      },
      "name": "meta.chord.abc",
      "patterns": [
        {
          "include": "#abc-note"
        },
        {
          "include": "#abc-rest"
        },
        {
          "include": "#abc-space"
        },
        {
          "include": "#decoration"
        },
        {
          "include": "#macro"
        },
        {
          "include": "#operators"
        }
      ]
    },
    "abc-note": {
      "comment": "Note Values (Accidentals, Pitch, Note Length)",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "constant.language.accidental.abc"
            },
            "2": {
              "name": "constant.character.note.abc"
            },
            "3": {
              "name": "storage.type.note-length.abc"
            }
          },
          "match": "(?x)\n  ([_=\\^](?:\\d*\\/*\\d*)|=|[_\\^]{2})?\n  ([A-Ga-g][,']*)\n  (\\d*[<>/]*\\d*)?"
        }
      ]
    },
    "abc-rest": {
      "comment": "Rests & Multi-measure Rests",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "storage.type.abc-rest.abc"
            },
            "2": {
              "name": "storage.type.rest-length.abc"
            }
          },
          "match": "([XZ])(\\d+)?",
          "name": "meta.code.abc-rest.abc"
        },
        {
          "captures": {
            "1": {
              "name": "storage.type.abc-rest.abc"
            },
            "2": {
              "name": "storage.type.rest-length.abc"
            }
          },
          "match": "([xz])(\\d*[<>/]*\\d*)?",
          "name": "meta.code.abc-rest.abc"
        }
      ]
    },
    "abc-space": {
      "captures": {
        "1": {
          "name": "storage.type.spacer.abc"
        },
        "2": {
          "name": "constant.numeric.space-length.abc"
        }
      },
      "comment": "Spacing Rest",
      "match": "([yY])(\\d+(?:\\.\\d*(?:pt|in|cm)?)?)?\\b",
      "name": "meta.code.abc-space.abc"
    },
    "annotation": {
      "begin": "(\\\"[_<>^@])",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.annotation.begin.abc"
        }
      },
      "comment": "String Annotations",
      "contentName": "string.quoted.double.annotation.abc",
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.annotation.end.abc"
        }
      },
      "name": "string.quoted.double.annotation.abc",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "barline": {
      "comment": "Bar lines, Repeat Section Bar Lines",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "comment.block.documentation.barline.abc"
            },
            "2": {
              "name": "comment.block.documentation.barline.repeat-length.abc"
            }
          },
          "match": "((?>\\[\\|\\]|\\[\\]))((?>\\d+(?:[,-]\\d+)*))?",
          "name": "meta.barline.invisible.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            }
          },
          "match": "((?>:+))",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            }
          },
          "match": "(\\[\\[)",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            }
          },
          "match": "(\\|\\])",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            }
          },
          "match": "((?>[\\[\\|\\]]:+))",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            },
            "2": {
              "name": "punctuation.separator.barline.repeat-length.abc"
            }
          },
          "match": "((?>:*\\|+))((?>\\d+(?:[,-]\\d+)*))?",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            },
            "2": {
              "name": "punctuation.separator.barline.repeat-length.abc"
            }
          },
          "match": "((?>:*\\]))((?>\\d+(?:[,-]\\d+)*))",
          "name": "meta.barline.abc"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.separator.barline.abc"
            },
            "2": {
              "name": "punctuation.separator.barline.repeat-length.abc"
            }
          },
          "match": "((?>:*\\[+(?![a-zA-Z]:|[^\\[\\s\\r\\n:\\d\\|\\]])))((?>\\d+(?:[,-]\\d+)*))?",
          "name": "meta.barline.abc"
        }
      ]
    },
    "chord-symbol": {
      "begin": "(\"(?![_<>^@]))",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.chord.begin.abc"
        }
      },
      "comment": "String Chord Symbols",
      "end": "(\")",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.chord.end.abc"
        }
      },
      "name": "string.quoted.double.chord.abc",
      "patterns": [
        {
          "include": "#escape"
        }
      ]
    },
    "comments": {
      "comment": "Line Comments, Directives / Pseudo-Comments, Namespace Comments, and Remark Fields",
      "patterns": [
        {
          "begin": "(?:^\\s*)?(?>%(?!%|abc))",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc punctuation.definition.comment.abc"
            }
          },
          "end": "$",
          "name": "comment.line.percentage.abc",
          "patterns": [
            {
              "include": "#escape"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#directive"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.abc"
            },
            "2": {
              "name": "keyword.other.special-method.namespace.abc"
            }
          },
          "match": "(?:^\\s*)?(?>(%)(abc(?:-\\d\\.\\d)?))",
          "name": "comment.line.namespace.abc",
          "patterns": [
            {
              "include": "#escape"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#directive"
            }
          ]
        },
        {
          "begin": "^(r:)",
          "beginCaptures": {
            "1": {
              "name": "support.function.field.remark.abc"
            }
          },
          "contentName": "comment.line.remark.abc",
          "end": "$",
          "name": "meta.field.remark.abc",
          "patterns": [
            {
              "include": "#escape"
            },
            {
              "include": "#comments"
            },
            {
              "include": "#directive"
            }
          ]
        },
        {
          "include": "#directive"
        }
      ]
    },
    "decoration": {
      "comment": "Decoration Symbols",
      "patterns": [
        {
          "match": "(?:^\\s*)?([-\\.~HLMOPSTuv](?!:))",
          "name": "variable.language.decoration.abc"
        },
        {
          "match": "(!\\w+!)",
          "name": "variable.language.decoration.abc"
        },
        {
          "match": "(?x)\n  (!(?:\\+|-[()]|\\/{1,3}|[0-5]|\\<[()]?|\\>[()]?|\\^|\n     accent|arpeggio|beam-accel|beam-rall|beambr[12]|beamon|\n     breath|coda|courtesy|crescendo[()]?|\n     D\\.C\\.(?:alcoda|alfine)?|D\\.S\\.(?:alcoda|alfine)?|\n     dacapo|dacoda|diminuendo[()]?|dot|downbow|editorial|\n     emphasis|f+|fermata|fine|gmark|invertedfermata|\n     invertedturn|invertedturnx|invisible|longphrase|\n     lowermordent|marcato|mediumphrase|mf|mordent|mp|open|p+|\n     plus|pralltriller|rbend|rbstop|roll|segno|sfz|shortphrase|\n     slide|snap|stemless|tenuto|thumb|trem[1-4]|trill[()]?|\n     turn|turnx|upbow|uppermordent|wedge|xstem|\\~[()])!)",
          "name": "variable.language.decoration.abc"
        },
        {
          "match": "(~(?![h-wH-W][a-zA-Z0-9]*))",
          "name": "variable.language.decoration.abc"
        }
      ]
    },
    "directive": {
      "begin": "(%%)\\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\\w*)\\b",
      "beginCaptures": {
        "1": {
          "name": "comment.line.percentage.directive.abc punctuation.definition.comment.abc"
        },
        "2": {
          "name": "keyword.operator.word.directive.abc"
        }
      },
      "contentName": "variable.parameter.directive.abc",
      "end": "$",
      "name": "meta.directive.abc",
      "patterns": [
        {
          "match": "(?x)\n  (MIDI +\n    (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|\n    bend(?:velocity|string)|chord(?:attack|name|program)|\n    control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|\n    drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|\n    gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|\n    portamento|program|ptstress|randomchordattack|ratio|stressmodel|\n    snt|rtranspose|temperament(?:linear|equal|normal)|transpose|\n    trim|vol(inc)?)\\b",
          "name": "keyword.operator.word.directive.midi.abc"
        },
        {
          "match": "(\\d*(?:\\.\\d*)?(?:pt|in|cm)?)",
          "name": "constant.numeric.float.length-unit.abc"
        },
        {
          "match": "(?i)\\b(true|false|yes|no|on|off)\\b",
          "name": "storage.type.directive.abc"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "embedded-content": {
      "patterns": [
        {
          "begin": "(%%)(begintext)\\b(\\s+(?:obeylines|fill|ragged|justify|align|skip))?\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            },
            "3": {
              "name": "variable.parameter.directive.abc"
            }
          },
          "comment": "Typeset Text",
          "contentName": "string.unquoted.typeset.abc",
          "end": "(%%)\\s*(endtext)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "name": "meta.typeset.abc",
          "patterns": [
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "begin": "(%%)\\s*(beginml)\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "comment": "Embedded HTML",
          "end": "(%%)\\s*(endml)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "name": "meta.html.abc",
          "patterns": [
            {
              "include": "text.html.basic"
            },
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "begin": "(%%)\\s*(beginjs)\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "comment": "Embedded JavaScript",
          "end": "(%%)\\s*(endjs)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "name": "meta.js.abc",
          "patterns": [
            {
              "include": "source.js"
            },
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "begin": "(%%)\\s*(beginsvg)\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "comment": "Embedded SVG",
          "end": "(%%)\\s*(endsvg)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "name": "meta.svg.abc",
          "patterns": [
            {
              "include": "text.xml"
            },
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "begin": "(%%)\\s*(beginps)(\\s+(?:nosvg|svg))?\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            },
            "3": {
              "name": "variable.parameter.directive.abc"
            }
          },
          "comment": "Embedded PostScript",
          "end": "(%%)\\s*(endps)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "name": "meta.ps.abc",
          "patterns": [
            {
              "include": "source.postscript"
            },
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "begin": "(%%)\\s*(beginmd)\\b",
          "beginCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "comment": "Embedded Markdown",
          "end": "(%%)\\s*(endmd)",
          "endCaptures": {
            "1": {
              "name": "comment.line.percentage.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "patterns": [
            {
              "include": "text.html.markdown"
            },
            {
              "include": "#prototype"
            }
          ]
        },
        {
          "comment": "Inline Postscript Instructions",
          "patterns": [
            {
              "begin": "(%%)\\s*(postscript|ps)\\b",
              "beginCaptures": {
                "1": {
                  "name": "comment.line.percentage.abc"
                },
                "2": {
                  "name": "support.function.directive.abc"
                }
              },
              "end": "$",
              "name": "meta.ps.abc",
              "patterns": [
                {
                  "include": "source.postscript"
                },
                {
                  "include": "#prototype"
                }
              ]
            }
          ]
        }
      ]
    },
    "escape": {
      "comment": "Escape Characters",
      "patterns": [
        {
          "match": "(\\\\(?:\\\\|%|[^ \\n\\r]|u\\h{4}|u\\h{8}|\\\\[[:punct:]&&[\\w]&&[^[ \\t\\v\\f]]]{2}))",
          "name": "constant.character.escape.abc"
        },
        {
          "match": "(?:&\\w+;)",
          "name": "constant.character.escape.abc"
        },
        {
          "match": "(?:&#\\d+;)",
          "name": "constant.character.escape.abc"
        },
        {
          "match": "(?:&#x\\h+;)",
          "name": "constant.character.escape.abc"
        }
      ]
    },
    "fields": {
      "comment": "Instruction field, Info fields, Voice field, Part field",
      "patterns": [
        {
          "include": "#instruction-field"
        },
        {
          "begin": "^((?>[[:alpha:]+&&[^IKPVTXr]]:))",
          "beginCaptures": {
            "1": {
              "name": "support.function.field.abc"
            }
          },
          "contentName": "string.unquoted.field.abc",
          "end": "$",
          "name": "meta.field.abc",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#escape"
            }
          ]
        },
        {
          "begin": "^((?>V:))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.voice.abc"
            }
          },
          "contentName": "variable.parameter.voice.abc",
          "end": "$",
          "name": "meta.field.voice.abc",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#escape"
            }
          ]
        },
        {
          "begin": "^((?>P:))",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.part.abc"
            }
          },
          "contentName": "variable.parameter.part.abc",
          "end": "$",
          "name": "meta.field.part.abc",
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#escape"
            }
          ]
        }
      ]
    },
    "grace": {
      "begin": "(\\{\\/?)",
      "beginCaptures": {
        "1": {
          "name": "support.type.grace.abc"
        }
      },
      "comment": "Grace Notes",
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "support.type.grace.abc"
        }
      },
      "name": "meta.code.grace.abc",
      "patterns": [
        {
          "match": "([A-Ga-g][,']*)",
          "name": "constant.character.note.abc"
        },
        {
          "match": "(\\d*[<>/]*\\d*)?",
          "name": "storage.type.note-length.abc"
        },
        {
          "include": "#abc-rest"
        },
        {
          "include": "#decoration"
        }
      ]
    },
    "illegals": {
      "comment": "Illegal Syntax",
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "invalid.illegal.barline.abc"
            }
          },
          "match": "([\\[]{2,}(?<!\\|)(?!:))",
          "name": "meta.code.illegal.abc"
        },
        {
          "captures": {
            "1": {
              "name": "invalid.illegal.barline.abc"
            }
          },
          "match": "([\\]](?!:)(?<![|\\]]))",
          "name": "meta.code.illegal.abc"
        },
        {
          "captures": {
            "1": {
              "name": "invalid.illegal.barline.abc"
            }
          },
          "match": "([\\[]{2,}(?!:))",
          "name": "meta.code.illegal.abc"
        }
      ]
    },
    "inline-field": {
      "patterns": [
        {
          "include": "#inline-instruction"
        },
        {
          "begin": "((?>\\[[[:alpha:]&&[^IKPVXr]]:))\\s*",
          "beginCaptures": {
            "1": {
              "name": "support.function.inline-field.abc"
            }
          },
          "comment": "Inline Info Fields",
          "contentName": "string.unquoted.inline-field.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "support.function.inline-field.abc"
            }
          },
          "name": "meta.inline-field.abc"
        },
        {
          "begin": "((?>\\[r:))\\s*",
          "beginCaptures": {
            "1": {
              "name": "support.function.inline-field.remark.abc"
            }
          },
          "comment": "Inline Remark Field",
          "contentName": "comment.block.remark.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "support.function.inline-field.remark.abc"
            }
          },
          "name": "meta.inline-field.remark.abc"
        },
        {
          "begin": "((?>\\[V:))\\s*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.voice.abc"
            }
          },
          "comment": "Inline Voice Field",
          "contentName": "variable.parameter.voice.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.voice.abc"
            }
          },
          "name": "meta.inline-field.voice.abc",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        },
        {
          "begin": "((?>\\[P:))\\s*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.part.abc"
            }
          },
          "comment": "Inline Part Field",
          "contentName": "variable.parameter.part.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.part.abc"
            }
          },
          "name": "meta.inline-field.part.abc",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        },
        {
          "begin": "((?>\\[T:))\\s*",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.title.abc"
            }
          },
          "comment": "Inline Title Field",
          "contentName": "string.unquoted.title.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.title.abc"
            }
          },
          "name": "meta.inline-field.title.abc",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        },
        {
          "begin": "((?>\\[K:)\\s*\\b([^% \\n\\r]+)?)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.part.abc"
            },
            "2": {
              "name": "variable.parameter.key.abc"
            }
          },
          "comment": "Inline Key Field",
          "contentName": "string.unquoted.key.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.key.abc"
            }
          },
          "name": "meta.inline-field.key.abc",
          "patterns": [
            {
              "include": "#escape"
            }
          ]
        }
      ]
    },
    "inline-instruction": {
      "patterns": [
        {
          "begin": "(?:(\\[I:)\\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\\w+)\\b)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.instruction.abc"
            },
            "2": {
              "name": "keyword.operator.word.instruction.abc"
            }
          },
          "comment": "Inline Instruction Field",
          "contentName": "variable.parameter.instruction.abc",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.instruction.abc"
            }
          },
          "name": "meta.inline-field.instruction.abc",
          "patterns": [
            {
              "include": "#escape"
            },
            {
              "match": "(?x)\n  (MIDI +\n    (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|\n    bend(?:velocity|string)|chord(?:attack|name|program)|\n    control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|\n    drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|\n    gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|\n    portamento|program|ptstress|randomchordattack|ratio|stressmodel|\n    snt|rtranspose|temperament(?:linear|equal|normal)|transpose|\n    trim|vol(inc)?)\\b",
              "name": "keyword.operator.word.directive.midi.abc"
            },
            {
              "match": "(?i)(true|false|yes|no|on|off)\\b",
              "name": "storage.type.directive.abc"
            },
            {
              "match": "(\\d*(?:\\.\\d*)?(?:pt|in|cm)?)\\b",
              "name": "constant.numeric.float.length-unit.abc"
            }
          ]
        },
        {
          "begin": "(\\[I:)\\s*(postscript|ps)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.instruction.abc"
            },
            "2": {
              "name": "keyword.operator.word.instruction.abc"
            }
          },
          "comment": "Inline PostScript Field",
          "end": "\\s*((?>\\]))",
          "endCaptures": {
            "1": {
              "name": "entity.name.tag.inline-field.instruction.abc"
            }
          },
          "name": "meta.ps.abc",
          "patterns": [
            {
              "include": "source.postscript"
            }
          ]
        }
      ]
    },
    "instruction-field": {
      "patterns": [
        {
          "begin": "(^I:)\\s*((?!(?:begin|end(?:text|svg|ps|js|md|ml))|postscript|ps)\\w+)\\b\\s+([^%\\r\\n]*)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.instruction.abc"
            },
            "2": {
              "name": "keyword.operator.word.directive.abc"
            },
            "3": {
              "name": "variable.parameter.directive.abc"
            }
          },
          "comment": "Instruction Field",
          "contentName": "variable.parameter.directive.abc",
          "end": "$",
          "name": "meta.field.instruction.abc",
          "patterns": [
            {
              "include": "#escape"
            },
            {
              "include": "#comments"
            },
            {
              "match": "(?x)\n  (MIDI +\n    (?:no)?barlines|bassprog|(?:no)?beataccents|beat(?:mod|string)?|\n    bend(?:velocity|string)|chord(?:attack|name|program)|\n    control(?:combo|string)?|deltaloudness|droneo(?:n|ff)|\n    drum(?:on|off|bars|map)|expand|fermata(?:fixed|proportional)?|\n    gchord(?:on|off)?|grace(?:divider)?|makechordchannels|pitchbend|\n    portamento|program|ptstress|randomchordattack|ratio|stressmodel|\n    snt|rtranspose|temperament(?:linear|equal|normal)|transpose|\n    trim|vol(inc)?)\\b",
              "name": "keyword.operator.word.directive.midi.abc"
            },
            {
              "match": "(?i)(true|false|yes|no|on|off)\\b",
              "name": "storage.type.directive.abc"
            },
            {
              "match": "(\\d*(?:\\.\\d*)?(?:pt|in|cm)?)\\b",
              "name": "constant.numeric.float.length-unit.abc"
            }
          ]
        },
        {
          "begin": "(^I:)\\s*(postscript|ps)\\b",
          "beginCaptures": {
            "1": {
              "name": "entity.name.tag.instruction.abc"
            },
            "2": {
              "name": "support.function.directive.abc"
            }
          },
          "comment": "PostScript Instruction Field",
          "end": "$",
          "name": "meta.ps.abc",
          "patterns": [
            {
              "include": "source.postscript"
            },
            {
              "include": "#prototype"
            }
          ]
        }
      ]
    },
    "key-field": {
      "begin": "^(?>(K:)\\s*\\b([^% \\n\\r]+)?\\b)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.tag.key.abc"
        },
        "2": {
          "name": "variable.parameter.key.abc"
        }
      },
      "comment": "Key Field. The key is significant in that it indicates where the start of the tune body is.",
      "contentName": "string.unquoted.key.abc",
      "end": "$",
      "name": "meta.field.key.abc",
      "patterns": [
        {
          "include": "#prototype"
        }
      ]
    },
    "macro": {
      "comment": "User-defined Macro",
      "match": "(\\~[h-zH-Z][a-zA-Z0-9]{,30})",
      "name": "support.type.macro.abc"
    },
    "operators": {
      "comment": "Overlay Operators, Line Continuations, Slurs, Ties, Line Breaks, Tuplets",
      "patterns": [
        {
          "match": "(\\(\\&|\\&\\&?|\\&\\))",
          "name": "support.function.overlay.abc"
        },
        {
          "match": "(\\\\(?= *| *$))",
          "name": "support.function.line-continue.abc"
        },
        {
          "match": "((?:\\((?![\\d:])[',]?)|\\))",
          "name": "support.function.slur.abc"
        },
        {
          "match": "([-\\.`])",
          "name": "support.type.ties.abc"
        },
        {
          "match": "(\\$(?= *| *$))",
          "name": "support.type.line-break.abc"
        },
        {
          "match": "(\\(\\d+(?::\\d*(?::\\d*)?)?)",
          "name": "support.type.tuplet.abc"
        }
      ]
    },
    "prototype": {
      "patterns": [
        {
          "include": "#escape"
        },
        {
          "include": "#fields"
        },
        {
          "include": "#comments"
        }
      ]
    },
    "strings": {
      "comment": "Chord symbols and String Annotations",
      "patterns": [
        {
          "include": "#chord-symbol"
        },
        {
          "include": "#annotation"
        }
      ]
    },
    "title-field": {
      "begin": "^((?>T:))",
      "beginCaptures": {
        "1": {
          "name": "entity.name.tag.title.abc"
        }
      },
      "comment": "Title Field. This field is only permitted in the header or body of a tune.",
      "contentName": "string.unquoted.title.abc",
      "end": "$",
      "name": "meta.field.title.abc",
      "patterns": [
        {
          "include": "#prototype"
        }
      ]
    },
    "tune-body": {
      "begin": "^(?>(K:)\\s*(\\w+)?)\\b\\s*([^%\\r\\n]*)",
      "beginCaptures": {
        "1": {
          "name": "entity.name.tag.key.abc"
        },
        "2": {
          "name": "keyword.control.key.abc"
        },
        "3": {
          "name": "string.unquoted.key.abc"
        }
      },
      "comment": "ABC Tune Body",
      "end": "^(\\s*)?$",
      "name": "meta.tune.body.abc",
      "patterns": [
        {
          "include": "#fields"
        },
        {
          "include": "#title-field"
        },
        {
          "include": "#key-field"
        },
        {
          "include": "#barline"
        },
        {
          "include": "#inline-field"
        },
        {
          "include": "#abc-chord"
        },
        {
          "include": "#abc-note"
        },
        {
          "include": "#abc-rest"
        },
        {
          "include": "#abc-space"
        },
        {
          "include": "#grace"
        },
        {
          "include": "#decoration"
        },
        {
          "include": "#macro"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#prototype"
        }
      ]
    }
  },
  "scopeName": "source.abc",
  "uuid": "c87e9f8a-efbb-4aa8-83e2-c6c26f2aa6fb"
}
